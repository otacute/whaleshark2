{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"<span style='color:#F2EA79'>**구해줘 NamQ의 홈즈**</span>\"\n",
        "author: \"*고래상어조*\"\n",
        "format: \n",
        "    dashboard:\n",
        "        scrolling: true \n",
        "        logo: NamQHome_logo.png\n",
        "        css: styles.css\n",
        "editor: \n",
        "  markdown: \n",
        "    wrap: 72\n",
        "---\n",
        "\n",
        "\n",
        "# {.sidebar}\n",
        "<div style=\"background-color: #f8f9fa; padding: 20px; border-radius: 10px;  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);\">\n",
        "<h2 style=\"color: #002a66;\">About</h2>\n",
        " <img src=\"shark.jpg\" alt=\"Image\" style=\"max-width: 100%; border-radius: 5px; margin-bottom: 15px;\">\n",
        "  <li style=\"border-bottom: 1px solid #ddd; padding-bottom: 10px margin-bottom: 15px;\"> 팀명 : 고래상어조 </li>\n",
        "  <li style=\"border-bottom: 1px solid #ddd; padding-bottom: 10px margin-bottom: 15px;\"> 팀원: 강남규, 박수빈, 박한결(팀장), 백선아(발표자) </li>\n",
        "  <li style=\"border-bottom: 1px solid #ddd; padding-bottom: 10px; margin-bottom: 15px;\"> 프로젝트 주제: Kaggle Ames House Price 데이터 시각화</li>\n",
        "  <li style=\"border-bottom: 1px solid #ddd; padding-bottom: 10px; margin-bottom: 15px;\"> 프로젝트 목표: 다양한 시각화를 통해 Ames시의 특징을 알아보고, 의뢰자의 요구 조건에 맞는 집을 선택한다.</li>\n",
        "  <li style=\"padding-bottom: 10px; margin-bottom: 15px;\"> 프로젝트 기간 : 2024. 08. 06 ~ 2024. 08. 19</li>\n",
        "  </div>\n",
        "  <div style=\"background-color: #f8f9fa; padding: 20px; border-radius: 10px;  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);\">\n",
        " <ul>\n",
        "  <h2 style=\"color: #002a66;\">Data Source</h2>\n",
        "    <li style=\"border-bottom: 1px solid #ddd; padding-bottom: 10px\"><a href=\"https://datausa.io/profile/geo/ames-ia/?healthDiversity=ageOption&measureOccupations=wage&race-income-income_geo=incomeRace0&raceEducation=pums5Race5&rentMortgage=rentOwn#race_and_ethnicity\" style=\"color: #0056b3; text-decoration: none;\">인종비율 및 직업별 소득데이터</a></li>\n",
        "    <li style=\"border-bottom: 1px solid #ddd; padding-bottom: 10px;margin-bottom: 15px;\"><a href=\"https://www.kaggle.com/competitions/house-prices-advanced-regression-techniques/data\" style=\"color: #0056b3; text-decoration: none;\">Kaggle House Price</a></li>\n",
        "    <li style=\"border-bottom: 1px solid #ddd; padding-bottom: 10px;margin-bottom: 15px;\"><a href=\"https://github.com/OpenDataDE/State-zip-code-GeoJSON\" style=\"color: #0056b3; text-decoration: none;\">Iowa map json</a></li>\n",
        "    <li style=\"border-bottom: 1px solid #ddd; padding-bottom: 10px;margin-bottom: 15px;\"><a href=\"https://www.bls.gov/cpi/tables/supplemental-files/historical-cpi-u-202312.pdf\" style=\"color: #0056b3; text-decoration: none;\">고래상어조 아이디어 PPT</a></li>\n",
        "    <li style=\"border-bottom: 1px solid #ddd; padding-bottom: 10px;margin-bottom: 15px;\"><a href=\"https://www.bls.gov/cpi/tables/supplemental-files/historical-cpi-u-202312.pdf\" style=\"color: #0056b3; text-decoration: none;\">CPI 자료 - 미국 노동 통계국(Bureau of Labor Statistics)</a></li>\n",
        "    <li style=\"padding-bottom: 10px; margin-bottom: 15px;\"><a href=\"https://docs.google.com/spreadsheets/d/1McH-oBzPZ8ewfyEl605wq-9b3gZHCIIBVbWHEHwNnIs/edit?gid=2006634661#gid=2006634661\" style=\"color: #0056b3; text-decoration: none;\">Ames House Price 데이터 코드북</a></li>\n",
        " </ul>\n",
        " \n",
        "</div>\n",
        "\n",
        "# 의뢰인 정보\n",
        "\n",
        "## Row \n",
        "\n",
        "::: {.card title=\"**의뢰자 NamQ씨의 Profile**\"}\n",
        "![*강남규씨의 식구들과 부동산 전문가 이삭 선생님*](강남규.jpg)\n",
        "\n",
        "> *이삭선생님! 옛정을 봐서라도 좋은 집 찾아주십쇼!*\n",
        "\n",
        "-   > 의뢰인의 인생 철학 : 가족의 행복이 곧 본인의 행복!\n",
        "\n",
        "-   Name: 강남규\n",
        "\n",
        "-   Age: 58\n",
        "\n",
        "-   Job: 도서관 사서\n",
        "\n",
        "-   Year Salary : 47,000 ($)\n",
        "\n",
        "-   Cash Assets : 250,000 ($)\n",
        "\n",
        "-   Location: Waukee, Iowa → Ames, Iowa\n",
        "\n",
        "-   Family: 4인 가구 - 아내(미모의 여성), 아들(강낭콩), 딸(강된장), 강아지(행복이)\n",
        "\n",
        "-   어느새 나이가 들어버린 남규씨, 앞으로의 인생 마지막 집을 구하기 위해 아이오아주 내에서 이사를 가기로 결정했다.\n",
        "    \n",
        "-   한때 스승이였던 소중한 인연 부동산 전문가 이삭씨(67세)에게 집 매물 추천을 받기로 했다.\n",
        "\n",
        "-   아들 강낭콩(22세)군: 아이오아주 주립대학 재학 재학 중\n",
        "\n",
        "-   딸 강된장(18세)양: Ames High School으로 전학 예정\n",
        "\n",
        "-   아래의 조건에 맞는 남규씨의 새 집을 골라주자.\n",
        ":::\n",
        "\n",
        "## 의뢰인의 조건\n"
      ],
      "id": "681a1b3d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "utilities = \"Utilities\"\n",
        "bath = \"Bathroom\"\n",
        "cars = \"Garage Cars\" \n",
        "fire = \"Fireplaces\"\n",
        "hvac = \"HVAC\"\n",
        "wood_decks = \"Wood decks\""
      ],
      "id": "c4f67210",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "전기, 가스, 수도, 하수 모두 제공",
        "icon": "house-gear-fill",
        "color": "light"
      },
      "source": [
        "dict(\n",
        "  value = utilities\n",
        ")"
      ],
      "id": "1f2be318",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "샤워 가능 화장실 1개이상, 간이 화장실 1개이상",
        "icon": "droplet",
        "color": "light"
      },
      "source": [
        "dict(\n",
        "  value = bath\n",
        ")"
      ],
      "id": "996d3a25",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "2대 이상",
        "icon": "car-front",
        "color": "light"
      },
      "source": [
        "dict(\n",
        "  value = cars\n",
        ")"
      ],
      "id": "bfdfa0df",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "벽난로 1개 이상",
        "icon": "fire",
        "color": "light"
      },
      "source": [
        "dict(\n",
        "  value = fire\n",
        ")"
      ],
      "id": "a0656be0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "난방 품질 우수인 집들만, 중앙 에어컨 시스템 필수",
        "icon": "fan",
        "color": "light"
      },
      "source": [
        "dict(\n",
        "  value = hvac\n",
        ")"
      ],
      "id": "3bec4027",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "나무 데크공간 필요, 데크 공간은 평균 이상일 것",
        "icon": "tree-fill",
        "color": "light"
      },
      "source": [
        "dict(\n",
        "  value = wood_decks\n",
        ")"
      ],
      "id": "f0af36f8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Row {.tabset}\n",
        "\n",
        "### Ames에서 집을 고르려면 어떤 요소들이 있을까?\n"
      ],
      "id": "6750f547"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "from itables import init_notebook_mode, show\n",
        "\n",
        "# Google Sheets URL\n",
        "gsheet_url = \"https://docs.google.com/spreadsheets/d/1McH-oBzPZ8ewfyEl605wq-9b3gZHCIIBVbWHEHwNnIs/gviz/tq?tqx=out:csv&sheet=codebook\"\n",
        "\n",
        "# Read the CSV data from Google Sheets\n",
        "codebook = pd.read_csv(gsheet_url)\n",
        "components = codebook.iloc[:, [0, 1, 2, 3, 5]]\n",
        "\n",
        "# Initialize the itables mode\n",
        "init_notebook_mode(all_interactive=True)\n",
        "\n",
        "# Display the table with specific container style\n",
        "show(components, buttons=['copy', 'excel', 'pdf'], scrollY=\"1000px\", scrollCollapse=True)"
      ],
      "id": "e2814237",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Ames 소개\n",
        "\n",
        "## 이사경로\n",
        "::: {.card title=\"**Iowa Map**\"}"
      ],
      "id": "32a8f1e2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "import json\n",
        "geo = json.load(open('bigdata/ia_iowa_zip_codes_geo.min.json', encoding = 'UTF-8'))\n",
        "\n",
        "def make_ames(num) : \n",
        "    postal_code = geo[\"features\"][num][\"properties\"]['ZCTA5CE10']\n",
        "    coordinate_list = geo[\"features\"][num][\"geometry\"][\"coordinates\"][0]\n",
        "    coordinate_array = np.array(coordinate_list)\n",
        "    x = coordinate_array[:, 0].flatten()\n",
        "    y = coordinate_array[:, 1].flatten()\n",
        "\n",
        "    return pd.DataFrame({\"postal_code\" : postal_code, \"x\":x, \"y\":y})\n",
        "\n",
        "# num의 범위 : 935\n",
        "# make_ames(0)\n",
        "# make_ames(934)\n",
        "\n",
        "result = pd.DataFrame({\n",
        "    'postal_code' : [],\n",
        "    'x' : [],\n",
        "    'y' : []\n",
        "})\n",
        "\n",
        "\n",
        "for i in range(len(geo[\"features\"])) : \n",
        "    result = pd.concat([result, make_ames(i)], ignore_index=True)\n",
        "    \n",
        "# ames랑 waukee 그림 그리기\n",
        "# ames의 postal codes\n",
        "# waukee_postal_codes\n",
        "ames_postal_codes = ['50010', '50011', '50012', '50013', '50014']\n",
        "waukee_postal_code = ['50003', '50263', '50325']\n",
        "result['location'] = np.where(result['postal_code'].isin(ames_postal_codes), 'Ames',(\n",
        "                     np.where(result['postal_code'].isin(waukee_postal_code), 'Waukee','Iowa')\n",
        "                      ))\n",
        "\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "sns.scatterplot(data = result, \n",
        "                x='x', y='y', \n",
        "                hue=\"location\", s=1,\n",
        "                palette={\"Ames\":\"red\", \"Iowa\":\"grey\", \"Waukee\":\"blue\"}\n",
        "                )\n",
        "# 제목 및 라벨 설정\n",
        "plt.rcParams['font.family'] = 'Malgun Gothic'\n",
        "plt.rcParams['axes.unicode_minus'] = False\n",
        "plt.legend(loc='upper left')\n",
        "_ = plt.title('Iowa Map')\n",
        "_ = plt.xlabel('경도')\n",
        "_ = plt.ylabel('위도')\n",
        "plt.xlim((-97, -89.5))\n",
        "plt.ylim((40.2, 43.8))\n",
        "plt.show()\n",
        "plt.clf()\n",
        "\n",
        "# 추가적인 출력이 발생하지 않도록 plt.close() 호출\n",
        "plt.close()"
      ],
      "id": "0c71b889",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.card title=\"**남Q씨의 이사 경로**\"}"
      ],
      "id": "d7e463f8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Ames와 Waukee의 평균 위도, 경도\n",
        "ames_x_mean = result[result['location'] == \"Ames\"]['x'].mean()\n",
        "ames_y_mean = result[result['location'] == \"Ames\"]['y'].mean()\n",
        "\n",
        "waukee_x_mean = result[result['location'] == \"Waukee\"]['x'].mean()\n",
        "waukee_y_mean = result[result['location'] == \"Waukee\"]['y'].mean()\n",
        "\n",
        "# Ames와 Waukee 간의 중간 지점\n",
        "middle_x = (ames_x_mean + waukee_x_mean) / 2\n",
        "middle_y = (ames_y_mean + waukee_y_mean) / 2\n",
        "\n",
        "# 그래프 그리기\n",
        "sns.scatterplot(data=result, \n",
        "                x='x', y='y', \n",
        "                hue=\"location\", s=1,\n",
        "                palette={\"Ames\":\"red\", \"Iowa\":\"grey\", \"Waukee\":\"blue\"}\n",
        "                )\n",
        "\n",
        "# 화살표 추가 (Waukee에서 Ames로)\n",
        "_ = plt.annotate('', xy=(ames_x_mean, ames_y_mean), \n",
        "             xytext=(waukee_x_mean, waukee_y_mean),\n",
        "             arrowprops=dict(facecolor='black', alpha=0.5, shrink=0.05))\n",
        "\n",
        "# 거리 텍스트 추가 (중간 지점에 50분 표시)\n",
        "_ = plt.text(middle_x, middle_y, '차량 이동 : 52분', fontsize=12, ha='center')\n",
        "\n",
        "# 제목 및 라벨 설정\n",
        "plt.rcParams['font.family'] = 'Malgun Gothic'\n",
        "plt.rcParams['axes.unicode_minus'] = False\n",
        "_ = plt.title('Iowa Map') \n",
        "_ = plt.xlabel('경도')\n",
        "_ = plt.ylabel('위도')\n",
        "\n",
        "# 축 범위 조정 (Ames와 Waukee를 확대하여 보기)\n",
        "plt.xlim((waukee_x_mean - 0.5, ames_x_mean + 0.5))\n",
        "plt.ylim((waukee_y_mean - 0.5, ames_y_mean + 0.5))\n",
        "\n",
        "# 레전드 위치 조정 (왼쪽 상단에 고정)\n",
        "plt.legend(loc='upper left')\n",
        "\n",
        "# 그래프 표시\n",
        "plt.show()\n",
        "plt.clf()\n",
        "\n",
        "# 추가적인 출력이 발생하지 않도록 plt.close() 호출\n",
        "plt.close()"
      ],
      "id": "73b609ac",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "## Waukee 소개\n"
      ],
      "id": "cdedb645"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "real_estate_price2 = 305300\n",
        "home_ownership_rate2 = 70.7\n",
        "commute_time2 = 19.6\n",
        "car_mean2 = 2\n",
        "mean_income2 = 106846"
      ],
      "id": "81ef7028",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Row "
      ],
      "id": "a3eaab67"
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "Waukee시 중위 소득 (단위 : $)",
        "icon": "cash-coin",
        "color": "secondary"
      },
      "source": [
        "dict(\n",
        "  value = mean_income2\n",
        ")"
      ],
      "id": "f39823dd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "Waukee시 중위 부동산 가격(단위 : $)",
        "icon": "currency-dollar",
        "color": "secondary"
      },
      "source": [
        "dict(\n",
        "  value = real_estate_price2\n",
        ")"
      ],
      "id": "df148deb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "Waukee시 주택 소유율(단위 : %)",
        "icon": "house-heart-fill",
        "color": "secondary"
      },
      "source": [
        "dict(\n",
        "  value = home_ownership_rate2\n",
        ")"
      ],
      "id": "4cf336e4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "Waukee시 평균 통근 시간(단위 : 분)",
        "icon": "person-walking",
        "color": "secondary"
      },
      "source": [
        "dict(\n",
        "  value = commute_time2\n",
        ")"
      ],
      "id": "1c368e4c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "Waukee시 평균 차량 개수(단위 : 대)",
        "icon": "car-front-fill",
        "color": "secondary"
      },
      "source": [
        "dict(\n",
        "  value = car_mean2\n",
        ")"
      ],
      "id": "d18b76e0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## ames 소개 \n"
      ],
      "id": "5e42cb3e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "real_estate_price = 247500\n",
        "home_ownership_rate = 42\n",
        "commute_time = 15.8\n",
        "car_mean = 2\n",
        "mean_income = 57428"
      ],
      "id": "6412e6cd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Row "
      ],
      "id": "265494f4"
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "Ames시 중위 소득 (단위 : $)",
        "icon": "cash-coin",
        "color": "success"
      },
      "source": [
        "dict(\n",
        "  value = mean_income\n",
        ")"
      ],
      "id": "4c36acd2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "Ames시 중위 부동산 가격(단위 : $)",
        "icon": "currency-dollar",
        "color": "success"
      },
      "source": [
        "dict(\n",
        "  value = real_estate_price\n",
        ")"
      ],
      "id": "d14e3b35",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "Ames시 주택 소유율(단위 : %)",
        "icon": "house-heart-fill",
        "color": "success"
      },
      "source": [
        "dict(\n",
        "  value = home_ownership_rate\n",
        ")"
      ],
      "id": "9342908f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "Ames시 평균 통근 시간(단위 : 분)",
        "icon": "person-walking",
        "color": "success"
      },
      "source": [
        "dict(\n",
        "  value = commute_time\n",
        ")"
      ],
      "id": "da8fd550",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "Ames시 평균 차량 개수(단위 : 대)",
        "icon": "car-front-fill",
        "color": "success"
      },
      "source": [
        "dict(\n",
        "  value = car_mean\n",
        ")"
      ],
      "id": "b86e74c4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Row \n",
        "## Waukee vs. Ames 비교 \n",
        "::: {.custom-graph}"
      ],
      "id": "e1373fd3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: false\n",
        "import plotly.graph_objects as go\n",
        "from plotly.subplots import make_subplots\n",
        "import pandas as pd\n",
        "\n",
        "# 데이터 생성\n",
        "w_vs_a = pd.DataFrame(\n",
        "    {\"city\" : [\"Waukee\", \"Ames\"],\n",
        "     \"income\" : [106846, 57428],\n",
        "     \"real_estate_price\" : [305300, 247500],\n",
        "     \"home_ownership_rate\":[70.7, 42],\n",
        "     \"commute_time\" : [19.6, 15.8],\n",
        "     \"car\" : [2, 2] }\n",
        ")\n",
        "\n",
        "# 감소율 계산 함수\n",
        "def calculate_percentage_decrease(waukee_value, ames_value):\n",
        "    return ((waukee_value - ames_value) / waukee_value) * 100\n",
        "\n",
        "# 각 항목에 대한 감소율 계산\n",
        "income_decrease = calculate_percentage_decrease(w_vs_a['income'][0], w_vs_a['income'][1])\n",
        "real_estate_price_decrease = calculate_percentage_decrease(w_vs_a['real_estate_price'][0], w_vs_a['real_estate_price'][1])\n",
        "home_ownership_rate_decrease = calculate_percentage_decrease(w_vs_a['home_ownership_rate'][0], w_vs_a['home_ownership_rate'][1])\n",
        "commute_time_decrease = calculate_percentage_decrease(w_vs_a['commute_time'][0], w_vs_a['commute_time'][1])\n",
        "car_decrease = calculate_percentage_decrease(w_vs_a['car'][0], w_vs_a['car'][1])\n",
        "\n",
        "# 서브플롯 생성\n",
        "fig_subplot = make_subplots(\n",
        "    rows=1, cols=5,\n",
        "    subplot_titles=(\"중위 소득($)\", \"중위 부동산 가격($)\", \"주택 소유율(%)\", \"평균 통근 시간(분)\", \"평균 차량 개수\")\n",
        ")\n",
        "\n",
        "# 색상 및 투명도 설정\n",
        "waukee_color = 'rgb(108,117,126)'  # Waukee 색상 \n",
        "ames_color = 'rgb(24,135,84)'  # Ames 색상 \n",
        "background_color = \"white\"\n",
        "grid_color = 'rgba(128, 128, 128, 0.3)'  # 그리드 색상 (회색, 투명도 0.3)\n",
        "\n",
        "# 각 서브플롯에 막대 그래프 추가\n",
        "fig_subplot.add_trace(\n",
        "    go.Bar(x=w_vs_a['city'], y=w_vs_a['income'], \n",
        "           marker_color=[waukee_color, ames_color], name='Median Income'),\n",
        "    row=1, col=1\n",
        ")\n",
        "\n",
        "fig_subplot.add_trace(\n",
        "    go.Bar(x=w_vs_a['city'], y=w_vs_a['real_estate_price'], \n",
        "           marker_color=[waukee_color, ames_color], name='Median Real Estate Price'),\n",
        "    row=1, col=2\n",
        ")\n",
        "\n",
        "fig_subplot.add_trace(\n",
        "    go.Bar(x=w_vs_a['city'], y=w_vs_a['home_ownership_rate'], \n",
        "           marker_color=[waukee_color, ames_color], name='Home Ownership Rate'),\n",
        "    row=1, col=3\n",
        ")\n",
        "\n",
        "fig_subplot.add_trace(\n",
        "    go.Bar(x=w_vs_a['city'], y=w_vs_a['commute_time'], \n",
        "           marker_color=[waukee_color, ames_color], name='Commute Time'),\n",
        "    row=1, col=4\n",
        ")\n",
        "\n",
        "fig_subplot.add_trace(\n",
        "    go.Bar(x=w_vs_a['city'], y=w_vs_a['car'], \n",
        "           marker_color=[waukee_color, ames_color], name='Cars'),\n",
        "    row=1, col=5\n",
        ")\n",
        "\n",
        "# 레이아웃 설정\n",
        "fig_subplot.update_layout(\n",
        "    showlegend=False,\n",
        "    plot_bgcolor=background_color,  # 그래프 배경색\n",
        "    paper_bgcolor=background_color,  # 전체 배경색\n",
        "    font=dict(color=\"gray\"),  # 폰트 색상\n",
        "    xaxis=dict(gridcolor=grid_color),  # X축 그리드 색상\n",
        "    yaxis=dict(gridcolor=grid_color),   # Y축 그리드 색상\n",
        "    height=400\n",
        ")\n",
        "\n",
        "# 각 서브플롯의 그리드 색상 설정 (모든 서브플롯에 동일하게 적용)\n",
        "for i in range(1, 6):\n",
        "    fig_subplot['layout'][f'xaxis{i}']['gridcolor'] = grid_color\n",
        "    fig_subplot['layout'][f'yaxis{i}']['gridcolor'] = grid_color\n",
        "\n",
        "# 각 서브플롯의 X축 레이블에 퍼센트 감소값 추가\n",
        "fig_subplot.update_xaxes(\n",
        "    title_text=f\"{income_decrease:.1f}% 감소\", row=1, col=1\n",
        ")\n",
        "\n",
        "fig_subplot.update_xaxes(\n",
        "    title_text=f\"{real_estate_price_decrease:.1f}% 감소\", row=1, col=2\n",
        ")\n",
        "\n",
        "fig_subplot.update_xaxes(\n",
        "    title_text=f\"{home_ownership_rate_decrease:.1f}% 감소\", row=1, col=3\n",
        ")\n",
        "\n",
        "fig_subplot.update_xaxes(\n",
        "    title_text=f\"{commute_time_decrease:.1f}% 감소\", row=1, col=4\n",
        ")\n",
        "\n",
        "fig_subplot.update_xaxes(\n",
        "    title_text=\"동일\", row=1, col=5\n",
        ")"
      ],
      "id": "93bdc294",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig_subplot.show()"
      ],
      "id": "9d3ffd74",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 통근수단 + 인종 데이터 시각화 \n",
        "### Column {width=30%}\n",
        "::: {.card title=\"**Ames 시민들의 2022년 주요 통근 수단**\"}"
      ],
      "id": "f7fae0db"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "\n",
        "def draw_interactive_pie_chart():\n",
        "    # CSV 파일 읽기\n",
        "    transportation = pd.read_csv('data/transportation.csv')\n",
        "\n",
        "    # 2022년 데이터만 필터링\n",
        "    data_2022 = transportation[transportation['Year'] == 2022]\n",
        "\n",
        "    # Group 별로 Commute Means를 집계\n",
        "    grouped_data = data_2022.groupby('Group')['Commute Means'].sum()\n",
        "\n",
        "    # 전체 합계 계산 후 비율로 변환\n",
        "    total_commute = grouped_data.sum()\n",
        "    grouped_data_percentage = (grouped_data / total_commute) * 100\n",
        "\n",
        "    # 비율로 정렬\n",
        "    grouped_data_percentage = grouped_data_percentage.sort_values(ascending=False)\n",
        "\n",
        "    # 상위 5개 항목을 제외한 나머지를 \"기타\"로 묶기\n",
        "    top_5 = grouped_data_percentage[:5]\n",
        "    others_percentage = grouped_data_percentage[5:].sum()\n",
        "\n",
        "    # '기타'에 포함되는 그룹들에 대한 실제 인구 수 계산\n",
        "    others_population = grouped_data[grouped_data_percentage.index[5:]].sum()\n",
        "\n",
        "    # 인구 수 데이터 포함하여 데이터 프레임 생성\n",
        "    top_5_df = top_5.reset_index()\n",
        "    top_5_df.columns = ['통근 수단', '비율']\n",
        "    top_5_df['인구수'] = top_5_df['통근 수단'].map(grouped_data)\n",
        "\n",
        "    # '기타' 항목 추가 (계산된 인구 수와 비율 포함)\n",
        "    others_df = pd.DataFrame({\n",
        "        '통근 수단': ['기타'],\n",
        "        '비율': [others_percentage],\n",
        "        '인구수': [others_population]\n",
        "    })\n",
        "\n",
        "    # top_5_df와 others_df를 concat으로 결합\n",
        "    top_5_df = pd.concat([top_5_df, others_df], ignore_index=True)\n",
        "\n",
        "    # 새로운 파스텔 색상 팔레트 설정\n",
        "    pastel_colors = ['#FFB3BA', '#FFDFBA', '#FFFFBA', '#BAFFC9', '#BAE1FF', '#C4B9FB']\n",
        "\n",
        "    # Plotly를 사용하여 원형 차트 그리기\n",
        "    fig = px.pie(top_5_df, \n",
        "                 names='통근 수단', \n",
        "                 values='비율', \n",
        "                 title='Ames 통근수단 (2022년)',\n",
        "                 color_discrete_sequence=pastel_colors,  # 커스텀 파스텔 색상 사용\n",
        "                 hover_data=['인구수'])  # 마우스 오버 시 인구 수만 표시\n",
        "\n",
        "    # 차트 레이아웃 업데이트\n",
        "    fig.update_traces(textposition='inside', textinfo='label+percent',\n",
        "                      hovertemplate='%{label}<br>인구수: %{customdata[0]:,}')  # 비율 없이 인구 수만 표시\n",
        "    fig.update_layout(legend_title_text='통근 수단')\n",
        "\n",
        "    # 차트 출력\n",
        "    fig.show()\n",
        "\n",
        "# 함수 호출 \n",
        "draw_interactive_pie_chart()"
      ],
      "id": "100888ce",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "### Column {width=70%}\n",
        "\n",
        "::: {.card title=\"**Ames시 연도별(2013-2022) 인종 비율**\"}"
      ],
      "id": "073eafd9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: false\n",
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "\n",
        "# Load the CSV file\n",
        "race = pd.read_csv('data/race.csv')\n",
        "\n",
        "# Convert column names to lowercase\n",
        "race.columns = race.columns.str.lower()\n",
        "\n",
        "# Map English race names to Korean\n",
        "race_name_mapping = {\n",
        "    'White Alone': '백인',\n",
        "    'Black or African American Alone': '흑인 또는 아프리카계 미국인',\n",
        "    'American Indian & Alaska Native Alone': '아메리카 인디언 & 알래스카 원주민',\n",
        "    'Asian Alone': '아시아인',\n",
        "    'Native Hawaiian & Other Pacific Islander Alone': '하와이 원주민 및 기타 태평양 섬 주민',\n",
        "    'Some Other Race Alone': '기타 인종',\n",
        "    'Two or More Races': '두 개 이상의 인종'\n",
        "}\n",
        "\n",
        "# Apply the mapping to the race column\n",
        "race['race'] = race['race'].map(race_name_mapping)\n",
        "\n",
        "# Filter the dataset to only include necessary columns\n",
        "race_filtered = race[['year', 'race', 'share']]\n",
        "\n",
        "# 그룹핑하여 year와 race 조합이 중복되지 않도록 합계 계산\n",
        "race_grouped = race_filtered.groupby(['year', 'race']).agg({'share': 'sum'}).reset_index()\n",
        "\n",
        "# Create an interactive line chart using Plotly with corrected data\n",
        "fig = px.line(\n",
        "    race_grouped, \n",
        "    x='year', \n",
        "    y='share', \n",
        "    color='race', \n",
        "    labels={\n",
        "        'year': '연도',\n",
        "        'share': '인구 비율 (%)',\n",
        "        'race': '인종'\n",
        "    },\n",
        "    title='연도별 인종 인구 비율',\n",
        "    hover_data={'share': ':.2%'},  # hover_data를 사용해 퍼센트로 포맷\n",
        ")\n",
        "\n",
        "# Ensure that all points are connected by lines\n",
        "fig.update_traces(mode='lines+markers')\n",
        "\n",
        "# 각 인종별로 올바른 정보를 표시하기 위해 hovertemplate과 text를 정확히 설정\n",
        "fig.update_traces(hovertemplate='%{x}년<br>인종=%{fullData.name}<br>인구 비율 (%): %{y:.2%}')\n",
        "\n",
        "# Y축을 퍼센트로 표시하도록 설정\n",
        "fig.update_layout(\n",
        "    xaxis_title='연도',\n",
        "    yaxis_title='인구 비율 (%)',\n",
        "    yaxis=dict(tickformat=\".0%\"),\n",
        "    hovermode='closest',\n",
        "    legend_title_text='인종'\n",
        ")"
      ],
      "id": "c2cc446f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Show the plot\n",
        "fig.show()"
      ],
      "id": "46e52340",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "## Occupations 시각화\n",
        "### Column {.custom-column width=60%}\n",
        "::: {.card title=\"**Ames시 남성 직종 별 종사율(2013-2022년)**\"}"
      ],
      "id": "c2a018c3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: false\n",
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "\n",
        "# 데이터 읽기\n",
        "occupations_df = pd.read_csv('data/occupations.csv')  \n",
        "\n",
        "# 남성 데이터 필터링\n",
        "male_occupations_df = occupations_df[occupations_df['Gender'] == 'Male']\n",
        "\n",
        "# 영어 -> 한국어 딕셔너리 생성\n",
        "occupation_translation_dict = {\n",
        "    \"Computer & Mathematical Occupations\": \"컴퓨터,수학 \",\n",
        "    \"Architecture & Engineering Occupations\": \"건축,공학\",\n",
        "    \"Life, Physical, & Social Science Occupations\": \"생명, 물리, 및 사회 과학\",\n",
        "    \"Community & Social Service Occupations\": \"사회 서비스 직종\",\n",
        "    \"Education Instruction, & Library Occupations\": \"교육 및 도서관\",\n",
        "    \"Arts, Design, Entertainment, Sports, & Media Occupations\": \"예술, 디자인, 엔터테인먼트, 스포츠, 및 미디어\",\n",
        "    \"Legal Occupations\": \"법률\",\n",
        "    \"Healthcare Practitioners & Technical Occupations\": \"의료 전문가\",\n",
        "    \"Healthcare Support Occupations\": \"의료 지원\",\n",
        "    \"Protective Service Occupations\": \"보호 서비스\",\n",
        "    \"Food Preparation & Serving Related Occupations\": \"음식 준비 및 서비스\",\n",
        "    \"Building & Grounds Cleaning & Maintenance Occupations\": \"건물 청소 및 유지보수\",\n",
        "    \"Personal Care & Service Occupations\": \"개인 관리 및 서비스\",\n",
        "    \"Sales & Related Occupations\": \"판매\",\n",
        "    \"Office & Administrative Support Occupations\": \"사무,행정 지원\",\n",
        "    \"Farming, Fishing, & Forestry Occupations\": \"농업, 어업 및 임업\",\n",
        "    \"Construction & Extraction Occupations\": \"건설 및 채굴\",\n",
        "    \"Installation, Maintenance, & Repair Occupations\": \"설치, 유지보수 및 수리\",\n",
        "    \"Production Occupations\": \"생산\",\n",
        "    \"Transportation Occupations\": \"운송\",\n",
        "    \"Management Occupations\": \"경영\",\n",
        "    \"Business & Financial Operations Occupations\": \"비즈니스 및 금융\",\n",
        "    \"Fire Fighting & Prevention, & Other Protective Service Workers Including Supervisors\": \"소방, 예방 서비스\", \n",
        "    \"Other Protective Service Workers Including Supervisors\": \"법 집행 근로자\",\n",
        "    \"Health Diagnosing & Treating Practitioners & Other Technical Occupations\": \"건강 진단 및 치료 전문가\",\n",
        "    \"Health Technologists & Technicians\": \"건강 관련 직종\",\n",
        "    \"Law Enforcement Workers Including Supervisors\": \"법 집행 근로자\"\n",
        "}\n",
        "\n",
        "subgroup_translation_dict = {\n",
        "    \"Computer, Engineering, & Science Occupations\": \"컴퓨터, 공학, 및 과학 직종\",\n",
        "    \"Education, Legal, Community Service, Arts, & Media Occupations\": \"교육, 법률, 커뮤니티 서비스, 예술, 및 미디어 직종\",\n",
        "    \"Healthcare Practitioners & Technical Occupations\": \"의료 전문가 및 기술 직종\",\n",
        "    \"Management, Business, & Financial Occupations\": \"경영, 비즈니스, 및 금융 직종\",\n",
        "    \"Natural Resources, Construction, & Maintenance Occupations\": \"천연 자원, 건설, 및 유지보수 직종\",\n",
        "    \"Production, Transportation, & Material Moving Occupations\": \"생산, 운송, 및 물류 직종\",\n",
        "    \"Protective Service Occupations\": \"보호 서비스 직종\",\n",
        "    \"Sales & Office Occupations\": \"판매 및 사무직\",\n",
        "    \"Service Occupations\": \"서비스 직종\"\n",
        "}\n",
        "\n",
        "# Occupation 번역 적용\n",
        "male_occupations_df['Occupation'] = male_occupations_df['Occupation'].replace(occupation_translation_dict)\n",
        "male_occupations_df['Subgroup'] = male_occupations_df['Subgroup'].replace(subgroup_translation_dict)\n",
        "\n",
        "# 각 Subgroup에 대해 고유한 Occupation 목록 생성\n",
        "unique_occupation_summary = male_occupations_df.groupby('Subgroup')['Occupation'].unique().apply(\n",
        "    lambda x: '<br>'.join([line for line in x])).reset_index()\n",
        "\n",
        "# 총 비율이 100%가 되도록 재조정\n",
        "total_share = male_occupations_df.groupby('Subgroup')['Share'].sum().reset_index()\n",
        "total_share['Adjusted Share'] = (total_share['Share'] / total_share['Share'].sum()) * 100\n",
        "\n",
        "# total_share와 고유 Occupation 목록 병합\n",
        "total_share = pd.merge(total_share, unique_occupation_summary, on='Subgroup', how='left')\n",
        "\n",
        "# Treemap 생성 (Adjusted Share를 values로 사용)\n",
        "fig = px.treemap(total_share, \n",
        "                 path=['Subgroup'], \n",
        "                 values='Adjusted Share',  # Adjusted Share를 사용하여 총합 100%로 설정\n",
        "                 title='Ames시 남성 직종 별 종사율(2013-2022년)',\n",
        "                 custom_data=['Occupation'])  # custom_data에 Occupation 추가\n",
        "\n",
        "# 타일 내에 Occupation 정보 표시 및 텍스트 설정\n",
        "fig.update_traces(\n",
        "    texttemplate=\"<b>%{label}</b><br>%{customdata[0]}<br><b>%{value:.2f}%</b>\",  # 줄바꿈 적용\n",
        "    textposition=\"middle center\",  # 텍스트 위치 중앙으로 설정\n",
        "    textinfo=\"label+text+value\",  # 레이블, 텍스트, 값 모두 표시\n",
        "    textfont_size=8,  # 텍스트 크기 조정\n",
        "    hoverinfo='skip'  # hovertemplate 비활성화\n",
        ")\n",
        "\n",
        "# Subgroup 텍스트 크기 크게 설정\n",
        "fig.update_traces(\n",
        "    selector=dict(type='treemap'),\n",
        "    textfont=dict(size=12),  # Subgroup 텍스트 크기 크게 조정\n",
        ")\n",
        "\n",
        "# 레이아웃 업데이트\n",
        "fig.update_layout(\n",
        "    title={'text': 'Ames 직종 별 종사율 (Male)', 'x': 0.5, 'xanchor': 'center'},\n",
        "    margin=dict(t=50, l=25, r=25, b=25),\n",
        "    treemapcolorway=[\"#FF6347\", \"#FFD700\", \"#32CD32\", \"#4682B4\", \"#6A5ACD\", \"#FF69B4\", \"#FFA500\", \"#DA70D6\"],\n",
        "    paper_bgcolor='#F4F4F4'\n",
        ")"
      ],
      "id": "48cce814",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# 트리맵 표시\n",
        "fig.show()"
      ],
      "id": "e2084c82",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "### Column {width=60%}\n",
        "::: {.card title=\"**Ames시 직종별 중위값 평균 소득(2013-2022년)**\"}"
      ],
      "id": "6733625a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: false\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import plotly.express as px\n",
        "import pandas as pd\n",
        "\n",
        "plt.rcParams['font.family'] = 'Malgun Gothic'\n",
        "plt.rcParams['axes.unicode_minus'] = False\n",
        "\n",
        "# 데이터 불러오기\n",
        "occupations_df = pd.read_csv('data/occupations.csv')  \n",
        "\n",
        "# 남성 직종 데이터만 필터링\n",
        "male_occupations_df = occupations_df[occupations_df['Gender'] == 'Male']\n",
        "\n",
        "# 직종 이름을 한국어로 번역\n",
        "translation_dict = {\n",
        "    \"Computer, Engineering, & Science Occupations\": \"컴퓨터, 공학, 및 과학 직종\",\n",
        "    \"Education, Legal, Community Service, Arts, & Media Occupations\": \"교육, 법률, 커뮤니티 서비스, 예술, 및 미디어 직종\",\n",
        "    \"Healthcare Practitioners & Technical Occupations\": \"의료 전문가 및 기술 직종\",\n",
        "    \"Management, Business, & Financial Occupations\": \"경영, 비즈니스, 및 금융 직종\",\n",
        "    \"Natural Resources, Construction, & Maintenance Occupations\": \"천연 자원, 건설, 및 유지보수 직종\",\n",
        "    \"Production, Transportation, & Material Moving Occupations\": \"생산, 운송, 및 물류 직종\",\n",
        "    \"Protective Service Occupations\": \"보호 서비스 직종\",\n",
        "    \"Sales & Office Occupations\": \"판매 및 사무직\",\n",
        "    \"Service Occupations\": \"서비스 직종\"\n",
        "}\n",
        "\n",
        "# 한국어로 변환된 직종 이름을 데이터프레임에 적용\n",
        "male_occupations_df['Subgroup'] = male_occupations_df['Subgroup'].map(translation_dict)\n",
        "# 직종별 소득을 계산하고 내림차순으로 정렬\n",
        "income_by_occupation = male_occupations_df.groupby('Subgroup')['Median Earnings'].mean().reset_index()\n",
        "income_by_occupation = income_by_occupation.sort_values(by='Median Earnings', ascending=True)  # 내림차순 정렬\n",
        "\n",
        "\n",
        "\n",
        "income_by_occupation['color'] = income_by_occupation['Subgroup'].apply(\n",
        "    lambda x: 'red' if x == \"교육, 법률, 커뮤니티 서비스, 예술, 및 미디어 직종\" else 'blue'\n",
        ")\n",
        "\n",
        "# Plotly 그래프 그리기\n",
        "fig = px.bar(income_by_occupation, x='Median Earnings', y='Subgroup', \n",
        "             title='직종별 중위값 평균 소득 (Male)', text='Median Earnings',\n",
        "             labels={'Median Earnings': '중위값 평균 소득', 'Subgroup': ''},\n",
        "             color='color', color_discrete_map='identity',\n",
        "             category_orders={'Subgroup': income_by_occupation['Subgroup'].tolist()})\n",
        "\n",
        "fig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\n",
        "fig.update_layout(showlegend=False)  # 범례 제거"
      ],
      "id": "b8ace21c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig.show()"
      ],
      "id": "696af3e3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "\n",
        "## Ames 주요 장소\n",
        "### Column {width=30%}\n",
        "::: {.card title=\"**Ames시의 HOT PLACE**\"}\n",
        "> *Ames에는 도서관, 정원, 박물관, 대학교, 아쿠아리움 등 주요 시설들이 있습니다.*"
      ],
      "id": "979538ac"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "\n",
        "gsheet_url = \"https://docs.google.com/spreadsheets/d/1McH-oBzPZ8ewfyEl605wq-9b3gZHCIIBVbWHEHwNnIs/gviz/tq?tqx=out:csv&sheet=ames-spot\"\n",
        "\n",
        "hot_place = pd.read_csv(gsheet_url)\n",
        "hot_place.iloc[:, :-3]"
      ],
      "id": "6e18e79a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "### Column {width=70%}\n",
        "::: {.card title=\"**Ames시 주요시설 Icon Map + Cluster**\"}"
      ],
      "id": "ce7690be"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: false\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import folium\n",
        "import plotly.express as px\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "gsheet_url = \"https://docs.google.com/spreadsheets/d/1McH-oBzPZ8ewfyEl605wq-9b3gZHCIIBVbWHEHwNnIs/gviz/tq?tqx=out:csv&sheet=ames-spot\"\n",
        "\n",
        "hot_spot= pd.read_csv(gsheet_url)\n",
        "\n",
        "house = pd.read_csv('data/house_loc.csv')\n",
        "house.rename(columns={'Unnamed: 0': 'Id'}, inplace=True)\n",
        "\n",
        "fig = go.Figure(go.Scattermapbox(\n",
        "  lat = hot_spot['Latitude'], lon = hot_spot['Longitude'],\n",
        "  mode = 'markers+text',\n",
        "  marker = dict(symbol = 'marker', size = 15, color = 'blue'),\n",
        "  text = hot_spot['Spot'], textposition = 'top center'))\n",
        "  \n",
        "fig.update_layout(title = dict(text = '에임스 주요시설', x = 0.5),\n",
        "                  autosize = True, hovermode='closest',\n",
        "                  mapbox = dict(accesstoken = 'pk.eyJ1IjoibmFtcSIsImEiOiJjbHpub2Q4bzUwc2ozMnBweXd4OW9mbm9mIn0.qc2xzGw9Za-ftKFZkDrCcA',\n",
        "                                bearing = 0, center = dict(lon = -93.642897, lat = 42.034482),\n",
        "                                pitch = 0, zoom = 12, style = 'light'))"
      ],
      "id": "bc88c0fa",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: false\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import plotly.graph_objects as go\n",
        "from sklearn.cluster import KMeans\n",
        "\n",
        "# 데이터 로드\n",
        "house = pd.read_csv('data/house_loc.csv')\n",
        "house.rename(columns={'Unnamed: 0': 'Id'}, inplace=True)\n",
        "\n",
        "# 클러스터링\n",
        "n_clusters = 10  # 클러스터 수\n",
        "kmeans = KMeans(n_clusters=n_clusters, random_state=0)\n",
        "house['Cluster'] = kmeans.fit_predict(house[['Latitude', 'Longitude']])\n",
        "centers = kmeans.cluster_centers_\n",
        "\n",
        "# 지도 시각화\n",
        "fig = go.Figure()\n",
        "\n",
        "# 클러스터별 색상 정의\n",
        "colorscale = 'Viridis'\n",
        "\n",
        "# 클러스터별 마커 추가\n",
        "for cluster in range(n_clusters):\n",
        "    cluster_data = house[house['Cluster'] == cluster]\n",
        "    fig.add_trace(go.Scattermapbox(\n",
        "        lat=cluster_data['Latitude'],\n",
        "        lon=cluster_data['Longitude'],\n",
        "        mode='markers',\n",
        "        marker=dict(\n",
        "            symbol='circle',\n",
        "            size=10,\n",
        "            color=cluster,\n",
        "            colorscale=colorscale,\n",
        "            cmin=0,\n",
        "            cmax=n_clusters-1,\n",
        "        ),\n",
        "        text=cluster_data['Id'].astype(str),\n",
        "        textposition='top right',\n",
        "        hovertemplate='<b>House ID: %{text}</b><extra></extra>',\n",
        "        name=f'Cluster {cluster+1}'\n",
        "    ))\n",
        "\n",
        "# 클러스터 중심점 추가\n",
        "fig.add_trace(go.Scattermapbox(\n",
        "    lat=centers[:, 0],\n",
        "    lon=centers[:, 1],\n",
        "    mode='markers',\n",
        "    marker=dict(\n",
        "        symbol='x',\n",
        "        size=20,\n",
        "        color='black'\n",
        "    ),\n",
        "    text=[f'Center {i+1}' for i in range(n_clusters)],\n",
        "    textposition='bottom center',\n",
        "    name='Cluster Centers'\n",
        "))\n",
        "\n",
        "# 카테고리별 마커 추가\n",
        "spot_Cultural = hot_spot.query(\"Category == 'Cultural' and Spot != 'Ames Municipal Airport'\")\n",
        "spot_Education = hot_spot.query(\"Category == 'Education'\")\n",
        "spot_Leisure = hot_spot.query(\"Category == 'Leisure'\")\n",
        "spot_Airport = hot_spot.query(\"Spot == 'Ames Municipal Airport'\")\n",
        "\n",
        "# 각 카테고리의 개수 계산\n",
        "cultural_count = len(spot_Cultural)\n",
        "education_count = len(spot_Education)\n",
        "leisure_count = len(spot_Leisure)\n",
        "airport_count = len(spot_Airport)\n",
        "house_count = len(house)\n",
        "\n",
        "# Cultural 아이콘 세부 설정\n",
        "ames_library = hot_spot.query(\"Spot == 'Ames Public Library'\")\n",
        "reiman_gardens = hot_spot.query(\"Spot == 'Reiman Gardens'\")\n",
        "stephens_auditorium = hot_spot.query(\"Spot == 'Stephens Auditorium'\")\n",
        "octagon_center = hot_spot.query(\"Spot == 'Octagon Center For the Arts'\")\n",
        "\n",
        "# Cultural 카테고리 - Cultural 관련 모든 아이콘을 추가\n",
        "fig.add_trace(go.Scattermapbox(\n",
        "    lat=spot_Cultural['Latitude'], \n",
        "    lon=spot_Cultural['Longitude'],\n",
        "    mode='markers+text',\n",
        "    marker=dict(size=30),\n",
        "    text=spot_Cultural['Spot'], \n",
        "    textposition='top center',\n",
        "    name='Cultural',\n",
        "    hoverinfo='text',\n",
        "    marker_symbol=[\n",
        "        'library' if spot == 'Ames Public Library' else\n",
        "        'park' if spot == 'Reiman Gardens' else\n",
        "        'theatre' if spot == 'Stephens Auditorium' else\n",
        "        'art-gallery'\n",
        "        for spot in spot_Cultural['Spot']\n",
        "    ],\n",
        "    marker_color=[\n",
        "        'brown' if spot == 'Ames Public Library' else\n",
        "        'green' if spot == 'Reiman Gardens' else\n",
        "        'purple' if spot == 'Stephens Auditorium' else\n",
        "        'blue'\n",
        "        for spot in spot_Cultural['Spot']\n",
        "    ]\n",
        "))\n",
        "\n",
        "# Education 카테고리 - 연필 아이콘으로 설정\n",
        "fig.add_trace(go.Scattermapbox(\n",
        "    lat=spot_Education['Latitude'], \n",
        "    lon=spot_Education['Longitude'],\n",
        "    mode='markers+text',\n",
        "    marker=dict(symbol='school', size=30, color='green'),\n",
        "    text=spot_Education['Spot'], \n",
        "    textposition='top center',\n",
        "    name='Education'\n",
        "))\n",
        "\n",
        "# Leisure 카테고리 - 수영장 아이콘으로 설정\n",
        "fig.add_trace(go.Scattermapbox(\n",
        "    lat=spot_Leisure['Latitude'], \n",
        "    lon=spot_Leisure['Longitude'],\n",
        "    mode='markers+text',\n",
        "    marker=dict(symbol='swimming', size=30, color='orange'),\n",
        "    text=spot_Leisure['Spot'], \n",
        "    textposition='top center',\n",
        "    name='Leisure'\n",
        "))\n",
        "\n",
        "# Ames Municipal Airport - 비행기 아이콘으로 설정\n",
        "fig.add_trace(go.Scattermapbox(\n",
        "    lat=spot_Airport['Latitude'], \n",
        "    lon=spot_Airport['Longitude'],\n",
        "    mode='markers+text',\n",
        "    marker=dict(symbol='airport', size=30, color='purple'),\n",
        "    text=spot_Airport['Spot'], \n",
        "    textposition='top center',\n",
        "    name='Airport'\n",
        "))\n",
        "\n",
        "# 레이아웃 설정\n",
        "fig.update_layout(\n",
        "    title=dict(text='에임스 주요시설', x=0.5),\n",
        "    autosize=True, \n",
        "    hovermode='closest',\n",
        "    mapbox=dict(\n",
        "        accesstoken='pk.eyJ1IjoibmFtcSIsImEiOiJjbHpub2Q4bzUwc2ozMnBweXd4OW9mbm9mIn0.qc2xzGw9Za-ftKFZkDrCcA',\n",
        "        bearing=0, \n",
        "        center=dict(lon=-93.642897, lat=42.034482),\n",
        "        pitch=0, \n",
        "        zoom=12, \n",
        "        style='light'\n",
        "    ),\n",
        "    updatemenus=[{\n",
        "        \"buttons\": [\n",
        "            {\"args\": [{\"visible\": [True] * n_clusters + [False, True, False, False, False]}],\n",
        "             \"label\": f\"Cultural ({cultural_count})\",\n",
        "             \"method\": \"update\"},\n",
        "            {\"args\": [{\"visible\": [True] * n_clusters + [False, False, True, False, False]}],\n",
        "             \"label\": f\"Education ({education_count})\",\n",
        "             \"method\": \"update\"},\n",
        "            {\"args\": [{\"visible\": [True] * n_clusters + [False, False, False, True, False]}],\n",
        "             \"label\": f\"Leisure ({leisure_count})\",\n",
        "             \"method\": \"update\"},\n",
        "            {\"args\": [{\"visible\": [True] * n_clusters + [False, False, False, False, True]}],\n",
        "             \"label\": f\"Airport ({airport_count})\",\n",
        "             \"method\": \"update\"},\n",
        "            {\"args\": [{\"visible\": [True] * n_clusters + [False, False, False, False, False]}],\n",
        "             \"label\": f\"Houses ({house_count})\",\n",
        "             \"method\": \"update\"},\n",
        "            {\"args\": [{\"visible\": [True] * 5 + [True] * n_clusters}],  # 클러스터는 항상 보이도록 설정\n",
        "             \"label\": \"Show All\",\n",
        "             \"method\": \"update\"}\n",
        "        ],\n",
        "        \"direction\": \"down\",\n",
        "        \"showactive\": True,\n",
        "        \"x\": 0.1,\n",
        "        \"y\": 1.1,\n",
        "        \"xanchor\": \"left\",\n",
        "        \"yanchor\": \"top\"\n",
        "    }],\n",
        "    margin=dict(l=25, r=250, t=100, b=25)\n",
        ")"
      ],
      "id": "6ac46012",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig.show()"
      ],
      "id": "3ce10301",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.card title=\"**Ames시 주요시설 사진 + 주거 밀집도 HeatMap**\"}"
      ],
      "id": "f4ba4927"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: false\n",
        "import pandas as pd\n",
        "import folium\n",
        "from folium.plugins import HeatMap\n",
        "\n",
        "# 데이터 불러오기\n",
        "house_data = pd.read_csv('data/house_loc.csv')\n",
        "\n",
        "# 지도 초기화\n",
        "map_sig = folium.Map(location=[42.034482, -93.642897], zoom_start=12)\n",
        "\n",
        "# 각 장소에 대한 정보 (위치 정보 및 이미지 URL 포함)\n",
        "spot_data = {\n",
        "    'Ames Public Library': {\n",
        "        'location': [42.0266, -93.6445],\n",
        "        'image_url': \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQetsyzsoJD7b92Lny2TojVtMVYGfD3njw-sA&s\"\n",
        "    },\n",
        "    'Mitchel': {\n",
        "        'location': [42.0347, -93.6489],\n",
        "        'image_url': \"https://lh3.googleusercontent.com/p/AF1QipPDMW-e0ala8_n82T1jX6HG_JWWflfIDSxd6Exy=s680-w680-h510\"\n",
        "    },\n",
        "    'Sawyer': {\n",
        "        'location': [42.0407, -93.6465],\n",
        "        'image_url': \"https://amescsd.org/app/uploads/sites/8/2022/04/Sawyer-Main-Image-scaled-e1649709450394-3000x1000-c-default.jpg\"\n",
        "    },\n",
        "    'Reiman Gardens': {\n",
        "        'location': [42.0178, -93.6344],\n",
        "        'image_url': \"https://lh5.googleusercontent.com/p/AF1QipPhBH-d9SM-8PHt0cfuyRO8VszsLiLwNyeACx0=w540-h312-n-k-no\"\n",
        "    },\n",
        "    'Hilton Coliseum': {\n",
        "        'location': [42.0279, -93.6358],\n",
        "        'image_url': \"https://upload.wikimedia.org/wikipedia/commons/thumb/3/35/Hilton_Coliseum_Inside_View.jpg/250px-Hilton_Coliseum_Inside_View.jpg\"\n",
        "    },\n",
        "    'Stephens Auditorium': {\n",
        "        'location': [42.0277, -93.6377],\n",
        "        'image_url': \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTQxQewscpasg669ypQmNvqdoBqBA0jgiyp8w&sg\"\n",
        "    },\n",
        "    'Farm House Museum': {\n",
        "        'location': [42.0265, -93.6487],\n",
        "        'image_url': \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSYuMQzhyB9qyl8eP1LRuEIJxdcVAEQ42T4lQHaWJpZD16aZGQ8qXJKqXfCEA&s\"\n",
        "    },\n",
        "    'Iowa State University': {\n",
        "        'location': [42.0267, -93.6483],\n",
        "        'image_url': \"https://media.licdn.com/dms/image/C4E1BAQGf37i29AlqpA/company-background_10000/0/1584130229015?e=2147483647&v=beta&t=3IUMwjsAjNa6Zo42wwLgAKR_BX_CGtTA_p0uwy4RD-k\"\n",
        "    },\n",
        "    'Furman Aquatic Center': {\n",
        "        'location': [42.0349, -93.6273],\n",
        "        'image_url': \"https://lh3.googleusercontent.com/p/AF1QipPIW7KoRYYBPXsU3lXCP_LwPOUw5pOFftLeqLWd=s680-w680-h510\"\n",
        "    },\n",
        "    'Tom Evans Plaza': {\n",
        "        'location': [42.0284, -93.6284],\n",
        "        'image_url': \"https://lh3.googleusercontent.com/p/AF1QipNmY43hWQw_BVhT1AF9zzaeYuPCCkThavee8px3=s680-w680-h510\"\n",
        "    },\n",
        "    'Octagon Center For the Arts': {\n",
        "        'location': [42.0264, -93.6255],\n",
        "        'image_url': \"https://lh3.googleusercontent.com/p/AF1QipMqzpEh8vwJsxiRNvgiZgAozwe4yVJ5PBipAsRZ=s1360-w1360-h1020\"\n",
        "    },\n",
        "    'Ames High School': {\n",
        "        'location': [42.0332, -93.6237],\n",
        "        'image_url': \"https://lh3.googleusercontent.com/p/AF1QipPjZiW8ejuvi7pvr8_Augg0Rb5j7LEchpNKo6Kh=s1360-w1360-h1020\"\n",
        "    },\n",
        "    'Ames Middle School': {\n",
        "        'location': [42.0276, -93.6187],\n",
        "        'image_url': \"https://www.amestrib.com/gcdn/authoring/authoring-images/2024/02/26/NATR/72747516007-226-ams-building-photos-1.jpg?width=660&height=364&fit=crop&format=pjpg&auto=webp\"},\n",
        "     \n",
        "     'Ames Municipal Airport': {\n",
        "        'location': [41.998834669594, -93.6223337603737],\n",
        "        'image_url': \"https://www.econdev.iastate.edu/wp-content/uploads/2017/04/Ames-airport.jpg\"}\n",
        "        \n",
        "   \n",
        "}\n",
        "\n",
        "# 장소에 대한 마커와 팝업 추가\n",
        "for name, data in spot_data.items():\n",
        "    popup_html = f\"\"\"\n",
        "    <div>\n",
        "        <img src=\"{data['image_url']}\" alt=\"Spot Image\" style=\"width: 300px; height: auto;\"/>\n",
        "        <p>{name}</p>\n",
        "    </div>\n",
        "    \"\"\"\n",
        "    folium.Marker(\n",
        "        location=data['location'],\n",
        "        popup=folium.Popup(popup_html, max_width=300),\n",
        "        icon=folium.Icon(color='red', icon='info-sign')\n",
        "    ).add_to(map_sig)\n",
        "\n",
        "# 히트맵을 위한 데이터 준비\n",
        "heat_data = [[row['Latitude'], row['Longitude'], row['Sale_Price']] for index, row in house_data.iterrows()]\n",
        "\n",
        "# 히트맵 추가\n",
        "HeatMap(heat_data, radius=15, max_zoom=13, blur=10).add_to(map_sig)"
      ],
      "id": "24f02996",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# 지도 표시\n",
        "map_sig"
      ],
      "id": "45c7acd0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "\n",
        "\n",
        "# 매물 선택\n",
        "\n",
        "## Row"
      ],
      "id": "a50b5023"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "utilities = \"Utilities\"\n",
        "bath = \"Bathroom\"\n",
        "cars = \"Garage Cars\" \n",
        "fire = \"Fireplaces\"\n",
        "hvac = \"HVAC\"\n",
        "wood_decks = \"Wood Decks\"\n",
        "cluster4 = \"Residential Area\""
      ],
      "id": "2bae205a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "전기, 가스, 수도, 하수 모두 제공",
        "icon": "house-gear-fill",
        "color": "light"
      },
      "source": [
        "dict(\n",
        "  value = utilities\n",
        ")"
      ],
      "id": "4edc0eae",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "샤워 가능 화장실 1개이상, 간이 화장실 1개이상",
        "icon": "droplet",
        "color": "light"
      },
      "source": [
        "dict(\n",
        "  value = bath\n",
        ")"
      ],
      "id": "33a00a4c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "2대 이상",
        "icon": "car-front",
        "color": "light"
      },
      "source": [
        "dict(\n",
        "  value = cars\n",
        ")"
      ],
      "id": "e46f2109",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "벽난로 1개 이상",
        "icon": "fire",
        "color": "light"
      },
      "source": [
        "dict(\n",
        "  value = fire\n",
        ")"
      ],
      "id": "cd344400",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "난방 품질 우수인 집들만, 중앙 에어컨 시스템 필수",
        "icon": "fan",
        "color": "light"
      },
      "source": [
        "dict(\n",
        "  value = hvac\n",
        ")"
      ],
      "id": "cf2a66d5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "나무 데크공간 필요, 데크 공간은 평균 이상일 것",
        "icon": "tree-fill",
        "color": "light"
      },
      "source": [
        "dict(\n",
        "  value = wood_decks\n",
        ")"
      ],
      "id": "6cd6294f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "Cluster(군집) 4 구역 거주 희망",
        "icon": "pin-map",
        "color": "light"
      },
      "source": [
        "dict(\n",
        "  value = cluster4\n",
        ")"
      ],
      "id": "ff15d46f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 조건\n",
        "### columns{width=40%}{.tabset}"
      ],
      "id": "f9bed097"
    },
    {
      "cell_type": "code",
      "metadata": {
        "title": "Utilities"
      },
      "source": [
        "from IPython.display import Image, display, Markdown\n",
        "# 텍스트 문구 표시\n",
        "display(Markdown(\"**1. 모든 공공 Utilities(전기, 가스, 수도, 하수) 보유**\"))\n",
        "# 이미지 표시\n",
        "display(Image(filename='유틸리티.jpg'))\n",
        "\n",
        "# 어떤 변수를 쓸까?\n",
        "# 1. 우선 한국처럼 모든 Utilities가 AllPub: 모든 공공 유틸리티 (전기, 가스, 수도, 하수) \n",
        "# 모두 제공되면 좋겠어 - 2927개 필터링 조건 1\n",
        "house2 = house2[house2['Utilities'] == 'AllPub']\n",
        "show(house2, scrollY=\"750px\", scrollCollapse=True)"
      ],
      "id": "30fe645b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "title": "Bathroom"
      },
      "source": [
        "from IPython.display import Image, display\n",
        "\n",
        "# 텍스트 문구 표시\n",
        "display(Markdown(\"**2. 샤워가 가능한 화장실 1개, 간이 화장실 1개 이상 총 2개 이상의 화장실 필수**\"))\n",
        "\n",
        "# 이미지 표시\n",
        "display(Image(filename='real_bath.jpg'))\n",
        "# 2. 샤워 가능 화장실 1개 이상 & 간이 화장실 1개 이상 \n",
        "# 샤워 가능 화장실 변수 생성 - FullBath\n",
        "# house.loc[:, ['Bsmt_Full_Bath', 'Full_Bath']]\n",
        "house2['FullBath'] = house2['Bsmt_Full_Bath'] + house2['Full_Bath'] \n",
        "\n",
        "# 간이 화장실 변수 생성 - HalfBath\n",
        "# house.loc[:, ['Bsmt_Half_Bath', 'Half_Bath']]\n",
        "house2['HalfBath'] = house2['Bsmt_Half_Bath'] + house2['Half_Bath'] \n",
        "\n",
        "# 화장실 변수 살펴보자능\n",
        "# house2.loc[:, ['FullBath', 'HalfBath']]\n",
        "\n",
        "# 여기서 FullBath>=1, HalfBath>=1인 조건을 걸어보면, 1220개의 행이 나옴\n",
        "house2 = house2[(house2['FullBath'] >= 1) & (house2['HalfBath'] >= 1)]\n",
        "house2 = house2.loc[ :, ['Utilities', 'FullBath', 'HalfBath', 'Garage_Cars', 'Fireplaces', 'Heating_QC','Central_Air', 'Wood_Deck_SF'] ]\n",
        "show(house2, scrollY=\"750px\", scrollCollapse=True)"
      ],
      "id": "c5609fca",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "title": "Garage Cars"
      },
      "source": [
        "from IPython.display import Image, display\n",
        "\n",
        "# 텍스트 문구 표시\n",
        "display(Markdown(\"**3. 2대 이상의 차량을 주차할 수 있는 차고지 필수**\"))\n",
        "\n",
        "# 이미지 표시\n",
        "display(Image(filename='garage.jpg'))\n",
        "# 3. 차가 2대 이상 있어서, 2대 이상의 차고를 원해, 971개의 행으로 줄여짐\n",
        "house2 = house2[house2['Garage_Cars']>=2]\n",
        "house2 = house2.loc[ :, ['Utilities', 'FullBath', 'HalfBath', 'Garage_Cars', 'Fireplaces', 'Heating_QC','Central_Air', 'Wood_Deck_SF'] ]\n",
        "show(house2, scrollY=\"750px\", scrollCollapse=True)"
      ],
      "id": "bccf42dd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "title": "Fireplaces"
      },
      "source": [
        "from IPython.display import Image, display\n",
        "\n",
        "# 텍스트 문구 표시\n",
        "display(Markdown(\"**4. 남Q의 크리스마스 로망인 가족과의 오붓한 시간을 위해서 난로 1개 이상 필수**\"))\n",
        "\n",
        "# 이미지 표시\n",
        "display(Image(filename='fireplace.jpg'))\n",
        "\n",
        "# 4. Ames시의 겨울은 눈이 오고 섭씨 영하 15도까지 내려가 많이 와서 춥더군. \n",
        "#    크리스마스도 보내고 싶어서 난로가 1개이상 있으면 좋겠어, 706개의 행으로 줄어듬\n",
        "house2 = house2[house2['Fireplaces']>=1]\n",
        "house2 = house2.loc[ :, ['Utilities', 'FullBath', 'HalfBath', 'Garage_Cars', 'Fireplaces', 'Heating_QC','Central_Air', 'Wood_Deck_SF'] ]\n",
        "show(house2, scrollY=\"750px\", scrollCollapse=True)"
      ],
      "id": "5f0763ae",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "title": "HVAC"
      },
      "source": [
        "from IPython.display import Image, display\n",
        "\n",
        "# 텍스트 문구 표시\n",
        "display(Markdown(\"**5. 난방 품질 우수 & 중앙 에어컨 시스템 필수  **\"))\n",
        "display(Markdown(\"*Ames의 겨울 날씨: 최저 -11°까지 내려감.*\"))\n",
        "display(Markdown(\"*Ames의 여름 날씨: 최대 29°까지 올라감.*\"))\n",
        "\n",
        "# 이미지 표시\n",
        "display(Image(filename='hvac.jpg'))\n",
        "# 5. 난방 품질이 우수하면 좋겠고, 중앙 에어컨 시스템이 있어야해 # 477개 행\n",
        "house2 = house2[(house2['Heating_QC']=='Excellent') & (house2['Central_Air']=='Y')]\n",
        "house2 = house2.loc[ :, ['Utilities', 'FullBath', 'HalfBath', 'Garage_Cars', 'Fireplaces', 'Heating_QC','Central_Air', 'Wood_Deck_SF'] ]\n",
        "show(house2, scrollY=\"750px\", scrollCollapse=True)"
      ],
      "id": "30b73fe8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "title": "Wood Decks"
      },
      "source": [
        "from IPython.display import Image, display\n",
        "# 텍스트 문구 표시\n",
        "display(Markdown(\"**6. 강아지(행복이)가 뛰어놀 수 있는 나무로 된 테크 필수**\"))\n",
        "\n",
        "# 이미지 표시\n",
        "display(Image(filename='best-decking-material-1024x600.jpg'))\n",
        "# 6. 나무로 된 데크를 좀 평균 이상 넓이로 가지고 싶어 # 240개 행\n",
        "house2 = house2[house2['Wood_Deck_SF'] >= house2['Wood_Deck_SF'].mean()]\n",
        "house2 = house2.loc[ :, ['Utilities', 'FullBath', 'HalfBath', 'Garage_Cars', 'Fireplaces', 'Heating_QC','Central_Air', 'Wood_Deck_SF'] ]\n",
        "show(house2, scrollY=\"750px\", scrollCollapse=True)"
      ],
      "id": "9d72dfa4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### {width=60%}\n",
        "::: {.card title=\"**매물 선택 조건 지도 시각화**\"}"
      ],
      "id": "279d5fdc"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: false\n",
        "import pandas as pd\n",
        "import plotly.graph_objects as go\n",
        "from sklearn.cluster import KMeans\n",
        "\n",
        "# 데이터 불러오기\n",
        "house_data = pd.read_csv('data/house_loc.csv')\n",
        "house = house_data.copy()\n",
        "house.rename(columns={'Unnamed: 0': 'Id'}, inplace=True)\n",
        "\n",
        "# 필터링을 위한 열 생성\n",
        "house['FullBath'] = house['Bsmt_Full_Bath'].fillna(0) + house['Full_Bath'].fillna(0)\n",
        "house['HalfBath'] = house['Bsmt_Half_Bath'].fillna(0) + house['Half_Bath'].fillna(0)\n",
        "\n",
        "# 클러스터링\n",
        "n_clusters = 10  # 클러스터 수\n",
        "kmeans = KMeans(n_clusters=n_clusters, random_state=0)\n",
        "house['Cluster'] = kmeans.fit_predict(house[['Latitude', 'Longitude']])\n",
        "centers = kmeans.cluster_centers_\n",
        "\n",
        "# 지도 시각화\n",
        "fig = go.Figure()\n",
        "\n",
        "fig.add_trace(go.Scattermapbox(\n",
        "  lat = house['Latitude'], lon = house['Longitude'],\n",
        "  mode = 'markers+text',\n",
        "  marker = dict(symbol = 'circle', size = 10, color = 'blue'),\n",
        "  text = hot_spot['Spot'], textposition = 'top center', name = 'Utilities'))\n",
        "\n",
        "house = house[house['Utilities'] == 'AllPub']\n",
        "\n",
        "fig.add_trace(go.Scattermapbox(\n",
        "  lat = house['Latitude'], lon = house['Longitude'],\n",
        "  mode = 'markers+text',\n",
        "  marker = dict(symbol = 'circle', size = 10, color = 'blue'),\n",
        "  text = hot_spot['Spot'], textposition = 'top center', name = 'Bathroom'))\n",
        "\n",
        "house['FullBath'] = house['Bsmt_Full_Bath'] + house['Full_Bath']\n",
        "house['HalfBath'] = house['Bsmt_Half_Bath'] + house['Half_Bath']\n",
        "house = house[(house['FullBath'] >= 1) & (house['HalfBath'] >= 1)]\n",
        "\n",
        "fig.add_trace(go.Scattermapbox(\n",
        "  lat = house['Latitude'], lon = house['Longitude'],\n",
        "  mode = 'markers+text',\n",
        "  marker = dict(symbol = 'circle', size = 10, color = 'blue'),\n",
        "  textposition = 'top center', name = 'Garage_Cars'))\n",
        "\n",
        "house = house[house['Garage_Cars']>=2]\n",
        "\n",
        "fig.add_trace(go.Scattermapbox(\n",
        "  lat = house['Latitude'], lon = house['Longitude'],\n",
        "  mode = 'markers+text',\n",
        "  marker = dict(symbol = 'circle', size = 10, color = 'blue'),\n",
        "  textposition = 'top center', name = 'Fireplaces'))\n",
        "\n",
        "house = house[house['Fireplaces']>=1]\n",
        "\n",
        "fig.add_trace(go.Scattermapbox(\n",
        "  lat = house['Latitude'], lon = house['Longitude'],\n",
        "  mode = 'markers+text',\n",
        "  marker = dict(symbol = 'circle', size = 10, color = 'blue'),\n",
        "  textposition = 'top center', name = 'HVAC'))\n",
        "\n",
        "house = house[(house['Heating_QC']=='Excellent') & (house['Central_Air']=='Y')]\n",
        "\n",
        "fig.add_trace(go.Scattermapbox(\n",
        "  lat = house['Latitude'], lon = house['Longitude'],\n",
        "  mode = 'markers+text',\n",
        "  marker = dict(symbol = 'circle', size = 10, color = 'blue'),\n",
        "  textposition = 'top center', name = 'Wood_decks'))\n",
        "\n",
        "house = house[house['Wood_Deck_SF'] >= house['Wood_Deck_SF'].mean()]\n",
        "\n",
        "fig.add_trace(go.Scattermapbox(\n",
        "  lat = house['Latitude'], lon = house['Longitude'],\n",
        "  mode = 'markers+text',\n",
        "  marker = dict(symbol = 'circle', size = 10, color = 'blue'),\n",
        "  textposition = 'top center', name = 'Cluster_4'))\n",
        "\n",
        "house = house[house['Cluster'] == 3]\n",
        "\n",
        "fig.add_trace(go.Scattermapbox(\n",
        "  lat = house['Latitude'], lon = house['Longitude'],\n",
        "  mode = 'markers+text',\n",
        "  marker = dict(symbol = 'circle', size = 10, color = 'blue'),\n",
        "  textposition = 'top center', name = '최종집후보'))\n",
        "\n",
        "# 레이아웃 설정\n",
        "fig.update_layout(\n",
        "    title=dict(text='매물선택조건', x=0.5),\n",
        "    autosize=True, \n",
        "    hovermode='closest',\n",
        "    mapbox=dict(\n",
        "        accesstoken='pk.eyJ1IjoibmFtcSIsImEiOiJjbHpub2Q4bzUwc2ozMnBweXd4OW9mbm9mIn0.qc2xzGw9Za-ftKFZkDrCcA',\n",
        "        bearing=0, \n",
        "        center=dict(lon=-93.642897, lat=42.034482),\n",
        "        pitch=0, \n",
        "        zoom=12, \n",
        "        style='light'\n",
        "    ),\n",
        "    margin=dict(l=25, r=250, t=100, b=25))\n"
      ],
      "id": "faca0f9c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig.show()"
      ],
      "id": "5b3bb488",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "## 최종 매물 데이터\n",
        "::: {.card title=\"**최종 집 선택 LIST**\"}"
      ],
      "id": "e9810312"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "house = house[['Lot_Area','House_Style','Year_Built','Year_Remod_Add', 'TotRms_AbvGrd', 'Overall_Cond','Year_Sold', 'Sale_Price']]\n",
        "house[\"year_CPI\"] = [1.359, 1.422, 1.455]\n",
        "house[\"Adj_Sale_Price\"] = house[\"Sale_Price\"] * house[\"year_CPI\"]\n",
        "house"
      ],
      "id": "392d603b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "# 매입 적기\n",
        "\n",
        "## row\n",
        "### Column {.tabset}"
      ],
      "id": "294c69d7"
    },
    {
      "cell_type": "code",
      "metadata": {
        "title": "2006~2010년 월별 평균 집값"
      },
      "source": [
        "import plotly.graph_objects as go\n",
        "import pandas as pd\n",
        "\n",
        "# 데이터 로드 및 정보 확인\n",
        "house_train = pd.read_csv(\"./data/train.csv\")\n",
        "house_train = house_train[['YrSold', 'MoSold', 'SalePrice']]\n",
        "\n",
        "# 년도별로 group by 해서 Sale_Price의 평균 구하기\n",
        "group_df = house_train.groupby(['YrSold', 'MoSold'])['SalePrice'].agg('mean').reset_index()\n",
        "\n",
        "# 새로운 'YrMo' 컬럼을 생성하여 시간 축으로 사용\n",
        "group_df['YrMo'] = group_df['MoSold'].astype(str) + '/' + group_df['YrSold'].astype(str)\n",
        "group_df['YrMo'] = pd.to_datetime(group_df['YrMo'], format='%m/%Y')\n",
        "\n",
        "# 애니메이션 프레임 생성 (월별로 프레임 정의)\n",
        "frames = []\n",
        "months = sorted(group_df['YrMo'].unique())\n",
        "\n",
        "# 월별로 누적된 데이터를 포함하는 프레임 생성\n",
        "for month in months:\n",
        "    filtered_df = group_df[group_df['YrMo'] <= month]\n",
        "    frames.append(go.Frame(\n",
        "        data=[\n",
        "            go.Scatter(\n",
        "                x=filtered_df['YrMo'],\n",
        "                y=filtered_df['SalePrice'],\n",
        "                mode='markers+lines',\n",
        "                marker=dict(color='red'),\n",
        "                line=dict(color='blue', dash='dash'),\n",
        "            )\n",
        "        ],\n",
        "        name=month.strftime('%b %Y')\n",
        "    ))\n",
        "\n",
        "# 고정된 프레임 (전체 데이터)\n",
        "fixed_frame = go.Frame(\n",
        "    data=[\n",
        "        go.Scatter(\n",
        "            x=group_df['YrMo'],\n",
        "            y=group_df['SalePrice'],\n",
        "            mode='markers+lines',\n",
        "            marker=dict(color='red'),\n",
        "            line=dict(color='blue', dash='dash'),\n",
        "        )\n",
        "    ],\n",
        "    name='Fixed'\n",
        ")\n",
        "\n",
        "# 초기 상태로 돌아가는 프레임 추가\n",
        "frames.append(fixed_frame)\n",
        "\n",
        "# 레이아웃 정의\n",
        "layout = go.Layout(\n",
        "    title=\"2006-2010년 월별 평균 집값\",\n",
        "    xaxis=dict(\n",
        "        title=\"Date\",\n",
        "        tickformat='%b %Y',\n",
        "        range=['2005-12-01', '2010-08-01'],\n",
        "        tickangle= 45,\n",
        "        dtick='M1'\n",
        "    ),\n",
        "    yaxis=dict(\n",
        "        title=\"Mean Sale Price\",\n",
        "        range=[group_df['SalePrice'].min()-5000, group_df['SalePrice'].max()+5000]\n",
        "    ),\n",
        "    updatemenus=[\n",
        "        {\n",
        "            \"buttons\": [\n",
        "                {\n",
        "                    \"args\": [None, {\"frame\": {\"duration\": 100, \"redraw\": True}, \"fromcurrent\": True, \"mode\": \"immediate\"}],\n",
        "                    \"label\": \"Play\",\n",
        "                    \"method\": \"animate\",\n",
        "                },\n",
        "                {\n",
        "                    \"args\": [[None], {\"frame\": {\"duration\": 0, \"redraw\": False}, \"mode\": \"immediate\", \"transition\": {\"duration\": 0}}],\n",
        "                    \"label\": \"Pause\",\n",
        "                    \"method\": \"animate\",\n",
        "                }\n",
        "            ],\n",
        "            \"direction\": \"left\",\n",
        "            \"pad\": {\"r\": 10, \"t\": 87},\n",
        "            \"showactive\": False,\n",
        "            \"type\": \"buttons\",\n",
        "            \"x\": 0.1,\n",
        "            \"xanchor\": \"right\",\n",
        "            \"y\": 0,\n",
        "            \"yanchor\": \"top\",\n",
        "        }\n",
        "    ],\n",
        "    sliders=[]  # 슬라이더를 빈 리스트로 설정하여 제거\n",
        ")\n",
        "\n",
        "# Figure 생성\n",
        "fig = go.Figure(\n",
        "    data=[\n",
        "        go.Scatter(\n",
        "            x=group_df['YrMo'],\n",
        "            y=group_df['SalePrice'],\n",
        "            mode='markers+lines',\n",
        "            marker=dict(color='red'),\n",
        "            line=dict(color='blue', dash='dash'),\n",
        "        )\n",
        "    ],\n",
        "    layout=layout,\n",
        "    frames=frames\n",
        ")\n",
        "\n",
        "# Figure 표시\n",
        "fig.show()"
      ],
      "id": "08889c33",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "title": "월별 집값 추세"
      },
      "source": [
        "group_df2 = house_train.groupby(['MoSold'])['SalePrice'].agg('mean').reset_index()\n",
        "\n",
        "x = group_df2['MoSold']\n",
        "y = group_df2['SalePrice']\n",
        "\n",
        "fig = go.Figure(\n",
        "  data = {\n",
        "    'type' : 'scatter', 'mode' : 'markers+lines',\n",
        "    'x' : x, 'y' : y,\n",
        "    'marker' : {'color' : 'red'},\n",
        "    'line' : {'color' : 'black', 'dash' : 'solid'},\n",
        "    'showlegend' : False\n",
        "  },\n",
        "  layout = {\n",
        "    'title'  : {'text' : \"월별 집값 차이\",\n",
        "                'font' : {'size' : 25},\n",
        "                'x' : 0.5},\n",
        "    'margin' : {'t': 50, 'b' : 25, 'l' : 25, 'r' : 25}\n",
        "  }\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "1936a348",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: false\n",
        "df_dict = {}\n",
        "for i in range(1, 13):\n",
        "    df_dict[i] = group_df[group_df['MoSold'] == i]\n",
        "\n",
        "x = {}\n",
        "y = {}\n",
        "for i in range(1,13):\n",
        "  x[i] = df_dict[i]['YrSold']\n",
        "  y[i] = df_dict[i]['SalePrice']\n",
        "\n",
        "y_min = min(y[i].min() for i in range(1, 13))\n",
        "y_max = max(y[i].max() for i in range(1, 13))\n",
        "\n",
        "from plotly.subplots import make_subplots\n",
        "\n",
        "fig = make_subplots(rows= 4, cols= 3, subplot_titles=[f\"{i}월\" for i in range(1, 13)])\n",
        "\n",
        "fig.add_trace(go.Scatter(x=x[1], y=y[1], showlegend=False), \n",
        "              row=1, col=1)\n",
        "fig.add_trace(go.Scatter(x=x[1], y=y[2], showlegend=False), \n",
        "              row=1, col=2)\n",
        "fig.add_trace(go.Scatter(x=x[1], y=y[3], showlegend=False),\n",
        "              row=1, col=3)\n",
        "fig.add_trace(go.Scatter(x=x[1], y=y[4], showlegend=False),\n",
        "              row=2, col=1)\n",
        "fig.add_trace(go.Scatter(x=x[1], y=y[5], showlegend=False),\n",
        "              row=2, col=2)\n",
        "fig.add_trace(go.Scatter(x=x[1], y=y[6], showlegend=False),\n",
        "              row=2, col=3)\n",
        "fig.add_trace(go.Scatter(x=x[1], y=y[7], showlegend=False),\n",
        "              row=3, col=1)\n",
        "fig.add_trace(go.Scatter(x=x[1], y=y[8], showlegend=False),\n",
        "              row=3, col=2)\n",
        "fig.add_trace(go.Scatter(x=x[1], y=y[9], showlegend=False),\n",
        "              row=3, col=3)\n",
        "fig.add_trace(go.Scatter(x=x[1], y=y[10], showlegend=False),\n",
        "              row=4, col=1)\n",
        "fig.add_trace(go.Scatter(x=x[1], y=y[11], showlegend=False),\n",
        "              row=4, col=2)\n",
        "fig.add_trace(go.Scatter(x=x[1], y=y[12], showlegend=False),\n",
        "              row=4, col=3)\n",
        "              \n",
        "fig.update_yaxes(range=[y_min, y_max], dtick='25000')"
      ],
      "id": "ae45137b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## row\n"
      ],
      "id": "7bbb07a1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig.add_trace(go.Scatter(x=x[1], y=y[12], showlegend=False),\n",
        "              row=4, col=3)"
      ],
      "id": "8100da62",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## row"
      ],
      "id": "a4368f09"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# 월별 평균 집값 계산\n",
        "group_df2 = house_train.groupby(['MoSold'])['SalePrice'].agg('mean').reset_index()\n",
        "\n",
        "# 가장 높은 집값과 낮은 집값의 월과 가격을 계산\n",
        "max_month = group_df2.loc[group_df2['SalePrice'].idxmax()]\n",
        "min_month = group_df2.loc[group_df2['SalePrice'].idxmin()]"
      ],
      "id": "d21a996b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "월별 평균 가장 높은 집값 (평균)",
        "icon": "arrow-up-circle",
        "color": "danger"
      },
      "source": [
        "# 최소 집값 대비 퍼센트 차이 계산\n",
        "price_difference_percent = ((max_month['SalePrice'] - min_month['SalePrice']) / min_month['SalePrice']) * 100\n",
        "\n",
        "dict(\n",
        "  value = f\"{int(max_month['MoSold'])}월: ${max_month['SalePrice']:,.0f} \"\n",
        ")"
      ],
      "id": "950a2a5e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "월별 평균 가장 낮은 집값 (평균)",
        "icon": "arrow-down-circle",
        "color": "primary"
      },
      "source": [
        "# 최고 집값 대비 퍼센트 차이 계산\n",
        "price_difference_percent = ((min_month['SalePrice'] - max_month['SalePrice']) / max_month['SalePrice']) * 100\n",
        "\n",
        "dict(\n",
        "  value = f\"{int(min_month['MoSold'])}월: ${min_month['SalePrice']:,.0f} \"\n",
        ")"
      ],
      "id": "5183871b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## row"
      ],
      "id": "4dda100f"
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "최고가 최저가 가격 비교",
        "icon": "balance-scale",
        "color": "warning"
      },
      "source": [
        "# 9월과 4월의 가격 설정\n",
        "september_price = 195683\n",
        "april_price = 171503\n",
        "\n",
        "# 4월이 9월에 비해 몇 % 저렴한지 계산\n",
        "percent_difference = ((september_price - april_price) / september_price) * 100\n",
        "\n",
        "dict(\n",
        "  value = (\n",
        "      f\"4월이 9월에 비해 평균적으로 {percent_difference:.2f}% 더 저렴합니다.\"\n",
        "  )\n",
        ")"
      ],
      "id": "e7992eb6",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\USER\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}